From 9a37f5733bdc6630f98a900c01a3e04c7625636d Mon Sep 17 00:00:00 2001
From: yuanhuihui <yuanhuihui@xiaomi.com>
Date: Wed, 25 Apr 2018 22:40:52 +0800
Subject: [PATCH 19/25] Fix incorrect print starved time of binder pool
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

mProcess->mMaxThreads which is the max size of binder thread pool,
default value is DEFAULT_MAX_BINDER_THREADS (=15), except system_server(=31).

1) The 1st binder thread is created by startThreadPool() which is not
counted in the mProcess->mMaxThreads. setting mThreadPoolStarted = true,
then binder pool start working.

2) In binder driver, if request binder thread and no idle thread,
and the requested_threads_started of this proc is less than mProcess->mMaxThreads,
will put BR_SPAWN_LOOPER cmd to userspace.

3) in userspace, comsumed BR_SPAWN_LOOPER, spawn new binder thread from binder pool.

We can see the max number of binder thread spawning byBR_SPAWN_LOOPER is mProcess-> mMaxThreads,
add 1st binder thread, so the max number of executing thread is (mMaxThreads + 1ï¼‰

Only when mExecutingThreadsCount is equal to mMaxThreads, it's really begining starving.

Test: manual

Change-Id: I0c4f0e0e837d0099fb4984a7d2d8476a3df3b8fa
Signed-off-by: yuanhuihui <yuanhuihui@xiaomi.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
Signed-off-by: Sipun Ku Mahanta <sipunkumar85@gmail.com>
---
 libs/binder/IPCThreadState.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index fd552b4f4d..7a2ab0c25d 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -449,7 +449,7 @@ status_t IPCThreadState::getAndExecuteCommand()
 
         pthread_mutex_lock(&mProcess->mThreadCountLock);
         mProcess->mExecutingThreadsCount++;
-        if (mProcess->mExecutingThreadsCount >= mProcess->mMaxThreads &&
+        if (mProcess->mExecutingThreadsCount > mProcess->mMaxThreads &&
                 mProcess->mStarvationStartTimeMs == 0) {
             mProcess->mStarvationStartTimeMs = uptimeMillis();
         }
@@ -459,7 +459,7 @@ status_t IPCThreadState::getAndExecuteCommand()
 
         pthread_mutex_lock(&mProcess->mThreadCountLock);
         mProcess->mExecutingThreadsCount--;
-        if (mProcess->mExecutingThreadsCount < mProcess->mMaxThreads &&
+        if (mProcess->mExecutingThreadsCount <= mProcess->mMaxThreads &&
                 mProcess->mStarvationStartTimeMs != 0) {
             int64_t starvationTimeMs = uptimeMillis() - mProcess->mStarvationStartTimeMs;
             if (starvationTimeMs > 100) {
-- 
2.17.1

