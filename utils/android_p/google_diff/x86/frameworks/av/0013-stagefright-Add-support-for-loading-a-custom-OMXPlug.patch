From aa862010ca29182b1567f404970d10c9aa81ea09 Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Wed, 8 Jul 2015 09:56:01 -0700
Subject: [PATCH 13/14] stagefright: Add support for loading a custom OMXPlugin

 * To facilitate moving the stagefright-plugins glue out of the
   framework, support is added to OMXMaster to load multiple
   external plugins besides internal/vendor versions.
 * This is currently limited to one plugin, defined by the
   "mm.sf.omx-plugin" system property. The code will allow any
   number of libraries to be loaded, though.
 * Should also be useful for nonstandard vendor implementations too.

Change-Id: I27d7e16ad56baa17754d8ea47a8c608a0d73d6f1

Conflicts:
	media/libstagefright/omx/OMXMaster.cpp
---
 media/libstagefright/omx/OMXMaster.cpp        | 69 ++++++++++++-------
 media/libstagefright/omx/SoftOMXPlugin.cpp    |  6 +-
 .../include/media/stagefright/omx/OMXMaster.h |  7 +-
 3 files changed, 52 insertions(+), 30 deletions(-)

diff --git a/media/libstagefright/omx/OMXMaster.cpp b/media/libstagefright/omx/OMXMaster.cpp
index 0967b5fa60..08146b304b 100644
--- a/media/libstagefright/omx/OMXMaster.cpp
+++ b/media/libstagefright/omx/OMXMaster.cpp
@@ -27,10 +27,12 @@
 #include <dlfcn.h>
 #include <fcntl.h>
 
+#include <media/stagefright/foundation/ADebug.h>
+#include <cutils/properties.h>
+
 namespace android {
 
-OMXMaster::OMXMaster()
-    : mVendorLibHandle(NULL) {
+OMXMaster::OMXMaster() {
 
     pid_t pid = getpid();
     char filename[20];
@@ -53,45 +55,51 @@ OMXMaster::OMXMaster()
 
     addVendorPlugin();
     addPlugin(new SoftOMXPlugin);
+    addUserPlugin();
 }
 
 OMXMaster::~OMXMaster() {
     clearPlugins();
-
-    if (mVendorLibHandle != NULL) {
-        dlclose(mVendorLibHandle);
-        mVendorLibHandle = NULL;
-    }
 }
 
 void OMXMaster::addVendorPlugin() {
     addPlugin("libstagefrighthw.so");
 }
 
+void OMXMaster::addUserPlugin() {
+    char plugin[PROPERTY_VALUE_MAX];
+    if (property_get("media.sf.omx-plugin", plugin, NULL)) {
+        addPlugin(plugin);
+    }
+}
+
 void OMXMaster::addPlugin(const char *libname) {
-    mVendorLibHandle = android_load_sphal_library(libname, RTLD_NOW);
+    void* handle = dlopen(libname, RTLD_NOW);
 
-    if (mVendorLibHandle == NULL) {
+    if (handle == NULL) {
         return;
     }
 
     typedef OMXPluginBase *(*CreateOMXPluginFunc)();
     CreateOMXPluginFunc createOMXPlugin =
         (CreateOMXPluginFunc)dlsym(
-                mVendorLibHandle, "createOMXPlugin");
+                handle, "createOMXPlugin");
     if (!createOMXPlugin)
         createOMXPlugin = (CreateOMXPluginFunc)dlsym(
-                mVendorLibHandle, "_ZN7android15createOMXPluginEv");
+                handle, "_ZN7android15createOMXPluginEv");
 
     if (createOMXPlugin) {
-        addPlugin((*createOMXPlugin)());
+        addPlugin((*createOMXPlugin)(), handle);
     }
 }
 
-void OMXMaster::addPlugin(OMXPluginBase *plugin) {
+void OMXMaster::addPlugin(OMXPluginBase *plugin, void *handle) {
+    if (plugin == 0) {
+       return;
+    }
     Mutex::Autolock autoLock(mLock);
 
-    mPlugins.push_back(plugin);
+    mPlugins.add(plugin, handle);
 
     OMX_U32 index = 0;
 
@@ -121,21 +129,32 @@ void OMXMaster::clearPlugins() {
     Mutex::Autolock autoLock(mLock);
 
     typedef void (*DestroyOMXPluginFunc)(OMXPluginBase*);
-    DestroyOMXPluginFunc destroyOMXPlugin =
-        (DestroyOMXPluginFunc)dlsym(
-                mVendorLibHandle, "destroyOMXPlugin");
 
-    mPluginByComponentName.clear();
+    for (unsigned int i = 0; i < mPlugins.size(); i++) {
+        OMXPluginBase *plugin = mPlugins.keyAt(i);
+        if (plugin != NULL) {
+            void *handle = mPlugins.valueAt(i);
+
+            if (handle != NULL) {
+                DestroyOMXPluginFunc destroyOMXPlugin =
+                    (DestroyOMXPluginFunc)dlsym(
+                            handle, "destroyOMXPlugin");
+
+                if (destroyOMXPlugin)
+                    destroyOMXPlugin(plugin);
+                else
+                    delete plugin;
 
-    for (List<OMXPluginBase *>::iterator it = mPlugins.begin();
-            it != mPlugins.end(); ++it) {
-        if (destroyOMXPlugin)
-            destroyOMXPlugin(*it);
-        else
-            delete *it;
-        *it = NULL;
+                dlclose(handle);
+            } else {
+                delete plugin;
+            }
+
+            plugin = NULL;
+        }
     }
 
+    mPluginByComponentName.clear();
     mPlugins.clear();
 }
 
diff --git a/media/libstagefright/omx/SoftOMXPlugin.cpp b/media/libstagefright/omx/SoftOMXPlugin.cpp
index 1f3e8c17b4..1748a4c294 100644
--- a/media/libstagefright/omx/SoftOMXPlugin.cpp
+++ b/media/libstagefright/omx/SoftOMXPlugin.cpp
@@ -81,6 +81,7 @@ OMX_ERRORTYPE SoftOMXPlugin::makeComponentInstance(
         OMX_COMPONENTTYPE **component) {
     ALOGV("makeComponentInstance '%s'", name);
 
+    dlerror(); // clear any existing error
     for (size_t i = 0; i < kNumComponents; ++i) {
         if (strcmp(name, kComponents[i].mName)) {
             continue;
@@ -112,6 +113,8 @@ OMX_ERRORTYPE SoftOMXPlugin::makeComponentInstance(
             return OMX_ErrorComponentNotFound;
         }
 
+        ALOGV("load component %s for %s", libName.c_str(), name);
+
         typedef SoftOMXComponent *(*CreateSoftOMXComponentFunc)(
                 const char *, const OMX_CALLBACKTYPE *,
                 OMX_PTR, OMX_COMPONENTTYPE **);
@@ -122,7 +125,8 @@ OMX_ERRORTYPE SoftOMXPlugin::makeComponentInstance(
                     "_Z22createSoftOMXComponentPKcPK16OMX_CALLBACKTYPE"
                     "PvPP17OMX_COMPONENTTYPE");
 
-        if (createSoftOMXComponent == NULL) {
+        if (const char *error = dlerror()) {
+            ALOGE("unable to dlsym %s: %s", libName.c_str(), error);
             dlclose(libHandle);
             libHandle = NULL;
 
diff --git a/media/libstagefright/omx/include/media/stagefright/omx/OMXMaster.h b/media/libstagefright/omx/include/media/stagefright/omx/OMXMaster.h
index 897f287873..a14be5aac4 100644
--- a/media/libstagefright/omx/include/media/stagefright/omx/OMXMaster.h
+++ b/media/libstagefright/omx/include/media/stagefright/omx/OMXMaster.h
@@ -52,15 +52,14 @@ struct OMXMaster : public OMXPluginBase {
 private:
     char mProcessName[16];
     Mutex mLock;
-    List<OMXPluginBase *> mPlugins;
+    KeyedVector<OMXPluginBase *, void *> mPlugins;
     KeyedVector<String8, OMXPluginBase *> mPluginByComponentName;
     KeyedVector<OMX_COMPONENTTYPE *, OMXPluginBase *> mPluginByInstance;
 
-    void *mVendorLibHandle;
-
     void addVendorPlugin();
+    void addUserPlugin();
     void addPlugin(const char *libname);
-    void addPlugin(OMXPluginBase *plugin);
+    void addPlugin(OMXPluginBase *plugin, void *handle = NULL);
     void clearPlugins();
 
     OMXMaster(const OMXMaster &);
-- 
2.17.1

