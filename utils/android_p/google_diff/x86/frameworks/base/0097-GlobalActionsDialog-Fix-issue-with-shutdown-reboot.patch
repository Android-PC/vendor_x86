From 36369ed28cdda446abebb7d200ac1cbf387343f0 Mon Sep 17 00:00:00 2001
From: saranya <saranya.gopal@intel.com>
Date: Thu, 31 Jan 2019 18:08:00 -0500
Subject: [PATCH 4/4] GlobalActionsDialog: Fix issue with shutdown/reboot

USB role should be switched back to host mode before
shutdown.

Jira: OAM-71244
Change-Id: I4abdcc3dbb2a6567cdc9c23cc1727827d3eb6766
---
 .../globalactions/GlobalActionsDialog.java    | 22 +++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
index a58f7bea7693..7cd55ae2b68f 100644
--- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
@@ -98,6 +98,10 @@ import com.android.systemui.plugins.GlobalActions.GlobalActionsManager;
 import com.android.systemui.statusbar.phone.ScrimController;
 import com.android.systemui.volume.SystemUIInterpolators.LogAccelerateInterpolator;
 
+import java.io.File;
+import java.io.FileWriter;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -134,6 +138,8 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
     private static final String GLOBAL_ACTION_KEY_SCREENSHOT = "screenshot";
     private static final String GLOBAL_ACTION_KEY_REBOOT_RECOVERY = "reboot_recovery";
     private static final String GLOBAL_ACTION_KEY_REBOOT_BOOTLOADER = "reboot_bootloader";
+    private static final String ROLE_PATH = "/sys/class/usb_role/intel_xhci_usb_sw-role-switch/role";
+	private static final String ROLE_HOST = "host";
 
     private final Context mContext;
     private final GlobalActionsManager mWindowManagerFuncs;
@@ -245,6 +251,18 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         mHandler.sendEmptyMessage(MESSAGE_DISMISS);
     }
 
+    public void writeSysfs(String path, String val) {
+        FileWriter fw = null;
+        try {
+            fw = new FileWriter(path);
+            fw.write(val);
+            fw.flush();
+            fw.close();
+        } catch (IOException e) {
+            Log.e(TAG, "writeSysfs failed exception:" + e);
+        }
+    }
+
     private void awakenIfNecessary() {
         if (mDreamManager != null) {
             try {
@@ -534,6 +552,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
+				writeSysfs(ROLE_PATH, ROLE_HOST);
                 mWindowManagerFuncs.reboot(true, null);
                 return true;
             }
@@ -553,6 +572,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         @Override
         public void onPress() {
             // shutdown by making sure radio and power are handled accordingly.
+            writeSysfs(ROLE_PATH, ROLE_HOST);
             mWindowManagerFuncs.shutdown();
         }
     }
@@ -571,6 +591,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
+				writeSysfs(ROLE_PATH, ROLE_HOST);
                 mWindowManagerFuncs.reboot(true, null);
                 return true;
             }
@@ -601,6 +622,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
 
         private void doReboot() {
             mHandler.sendEmptyMessageDelayed(MESSAGE_DISMISS, DIALOG_DISMISS_DELAY);
+            writeSysfs(ROLE_PATH, ROLE_HOST);
             mWindowManagerFuncs.reboot(false, null);
         }
     }
-- 
2.17.1

