From 87d209e53687a3a7eca37bc96cc4b6d974290bb4 Mon Sep 17 00:00:00 2001
From: Chih-Wei Huang <cwhuang@linux.org.tw>
Date: Wed, 13 Dec 2017 15:05:54 +0800
Subject: [PATCH 17/23] init: add modprobe

We added the modprobe function to init before but it was dropped in
oreo-x86. Originally I planned to replace it by toybox's modprobe.
However, it doesn't work as expected. For example, the audio driver
is not loaded correctly in some Skylake devices.

To fix that, add back the modprobe function to init.
---
 init/Android.mk  |  1 +
 init/devices.cpp | 36 ++++++++++++++++++++++++++++++++++++
 init/init.cpp    |  4 ++++
 init/ueventd.h   |  1 +
 4 files changed, 42 insertions(+)

diff --git a/init/Android.mk b/init/Android.mk
index 5fbbd386cb..d33f9d32a0 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -97,6 +97,7 @@ LOCAL_REQUIRED_MODULES := \
 
 # Create symlinks.
 LOCAL_POST_INSTALL_CMD := $(hide) mkdir -p $(TARGET_ROOT_OUT)/sbin; \
+    ln -sf ../init $(TARGET_ROOT_OUT)/sbin/modprobe; \
     ln -sf ../init $(TARGET_ROOT_OUT)/sbin/ueventd; \
     ln -sf ../init $(TARGET_ROOT_OUT)/sbin/watchdogd
 
diff --git a/init/devices.cpp b/init/devices.cpp
index d661f3c073..b3f0e41932 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -31,6 +31,7 @@
 #include <private/android_filesystem_config.h>
 #include <selinux/android.h>
 #include <selinux/selinux.h>
+#include <cutils/klog.h>
 #include <cutils/probe_module.h>
 
 #include "selinux.h"
@@ -537,5 +538,40 @@ DeviceHandler::DeviceHandler()
     : DeviceHandler(std::vector<Permissions>{}, std::vector<SysfsPermissions>{},
                     std::vector<Subsystem>{}, std::set<std::string>{}, false) {}
 
+int modprobe_main(int argc, char **argv)
+{
+    // We only accept requests from root user (kernel)
+    if (getuid()) return -EPERM;
+
+    // Kernel will launch a user space program specified by
+    // /proc/sys/kernel/modprobe to load modules.
+    // No deferred loading in this case.
+    while (argc > 1 && (!strcmp(argv[1], "-q") || !strcmp(argv[1], "--"))) {
+        klog_set_level(KLOG_NOTICE_LEVEL);
+        argc--, argv++;
+    }
+
+    if (argc < 2) {
+        // it is called without enough arguments
+        return -EINVAL;
+    }
+
+    std::string options;
+    if (argc > 2) {
+        options = argv[2];
+        for (int i = 3; i < argc; ++i) {
+            options += ' ';
+            options += argv[i];
+        }
+    }
+    KLOG_NOTICE("modprobe", "%s %s", argv[1], options.c_str());
+
+    Uevent uevent = { .modalias = argv[1] };
+    DeviceHandler dh;
+    dh.ReadModulesDescFiles();
+    dh.OnColdBootDone();
+    return dh.LoadModule(uevent) || dh.LoadModule(uevent.modalias) ? 0 : -1;
+}
+
 }  // namespace init
 }  // namespace android
diff --git a/init/init.cpp b/init/init.cpp
index 39ad106700..76029a8919 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -549,6 +549,10 @@ static void InstallSigtermHandler() {
 }
 
 int main(int argc, char** argv) {
+    if (!strcmp(basename(argv[0]), "modprobe")) {
+        return modprobe_main(argc, argv);
+    }
+
     if (!strcmp(basename(argv[0]), "ueventd")) {
         return ueventd_main(argc, argv);
     }
diff --git a/init/ueventd.h b/init/ueventd.h
index 51775ecece..2841eca722 100644
--- a/init/ueventd.h
+++ b/init/ueventd.h
@@ -21,6 +21,7 @@ namespace android {
 namespace init {
 
 int ueventd_main(int argc, char** argv);
+int modprobe_main(int argc, char **argv);
 
 }  // namespace init
 }  // namespace android
-- 
2.17.1

