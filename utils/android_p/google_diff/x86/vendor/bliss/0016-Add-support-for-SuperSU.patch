From 5ef3afe273a1086ed1bed6d4359f5c3bee147bdd Mon Sep 17 00:00:00 2001
From: Unknown <electrikjesus@gmail.com>
Date: Mon, 12 Dec 2016 15:52:32 -0500
Subject: [PATCH] Add support for SuperSU

Conflicts:
	sepolicy/sepolicy.mk

Change-Id: I3defa61f82801bd533bd6944a643a7857adea7b9
---
 config/common.mk                           |  4 ++
 prebuilt/common/etc/init.d/99SuperSUDaemon |  2 +
 sepolicy/private/file_contexts             | 11 ++++
 sepolicy/private/su.te                     | 61 ++++++++++++++++++++++
 4 files changed, 78 insertions(+)
 create mode 100644 prebuilt/common/etc/init.d/99SuperSUDaemon
 create mode 100644 sepolicy/private/su.te

diff --git a/config/common.mk b/config/common.mk
index e07ab6135..91ddf3b53 100644
--- a/config/common.mk
+++ b/config/common.mk
@@ -170,6 +170,10 @@ $(call inherit-product-if-exists, vendor/extra/product.mk)
 PRODUCT_COPY_FILES += \
     vendor/bliss/prebuilt/common/bin/vi:system/bin/vi
 
+# SuperSU
+PRODUCT_COPY_FILES += \
+    $(LOCAL_PATH)/etc/init.d/99SuperSUDaemon:system/etc/init.d/99SuperSUDaemon
+
 # Boot Animation
 PRODUCT_PACKAGES += \
     bootanimation.zip
diff --git a/prebuilt/common/etc/init.d/99SuperSUDaemon b/prebuilt/common/etc/init.d/99SuperSUDaemon
new file mode 100644
index 000000000..de738c17b
--- /dev/null
+++ b/prebuilt/common/etc/init.d/99SuperSUDaemon
@@ -0,0 +1,2 @@
+#!/system/bin/sh
+/system/xbin/daemonsu --auto-daemon &
diff --git a/sepolicy/private/file_contexts b/sepolicy/private/file_contexts
index b62ada70e..f3b0129f6 100644
--- a/sepolicy/private/file_contexts
+++ b/sepolicy/private/file_contexts
@@ -5,3 +5,14 @@
 
 # Set disk scheduler via init
 /sys/block/[^/]+/queue/scheduler                   u:object_r:sysfs_block_scheduler:s0
+
+# Auditd is a logging daemon. Put it into logd's context
+/system/bin/auditd        u:object_r:logd_exec:s0
+/data/misc/audit(/.*)?    u:object_r:auditd_log:s0
+
+/system/bin/sysinit       u:object_r:sysinit_exec:s0
+
+# Superuser's control sockets
+/dev/com.android.settings.daemon(/.*)?   u:object_r:superuser_device:s0
+/dev/com.android.settings(/.*)?   u:object_r:superuser_device:s0
+
diff --git a/sepolicy/private/su.te b/sepolicy/private/su.te
new file mode 100644
index 000000000..76e4176aa
--- /dev/null
+++ b/sepolicy/private/su.te
@@ -0,0 +1,61 @@
+type superuser_device, file_type;
+
+## Perms for the daemon
+
+type sudaemon, domain;
+
+userdebug_or_eng(`
+  domain_trans(init, su_exec, sudaemon)
+  # The userspace app uses /dev sockets to control per-app access
+  allow sudaemon superuser_device:dir { create rw_dir_perms setattr unlink };
+  allow sudaemon superuser_device:sock_file { create setattr unlink write };
+
+  # sudaemon is also permissive to permit setenforce.
+  permissive sudaemon;
+
+  # Add sudaemon to various domains
+  net_domain(sudaemon)
+  app_domain(sudaemon)
+
+  dontaudit sudaemon self:capability_class_set *;
+  dontaudit sudaemon kernel:security *;
+  dontaudit sudaemon kernel:system *;
+  dontaudit sudaemon self:memprotect *;
+  dontaudit sudaemon domain:process *;
+  dontaudit sudaemon domain:fd *;
+  dontaudit sudaemon domain:dir *;
+  dontaudit sudaemon domain:lnk_file *;
+  dontaudit sudaemon domain:{ fifo_file file } *;
+  dontaudit sudaemon domain:socket_class_set *;
+  dontaudit sudaemon domain:ipc_class_set *;
+  dontaudit sudaemon domain:key *;
+  dontaudit sudaemon fs_type:filesystem *;
+  dontaudit sudaemon {fs_type dev_type file_type}:dir_file_class_set *;
+  dontaudit sudaemon node_type:node *;
+  dontaudit sudaemon node_type:{ tcp_socket udp_socket rawip_socket } *;
+  dontaudit sudaemon netif_type:netif *;
+  dontaudit sudaemon port_type:socket_class_set *;
+  dontaudit sudaemon port_type:{ tcp_socket dccp_socket } *;
+  dontaudit sudaemon domain:peer *;
+  dontaudit sudaemon domain:binder *;
+  dontaudit sudaemon property_type:property_service *;
+')
+
+## Perms for the app
+
+userdebug_or_eng(`
+  typealias shell alias suclient;
+
+  # Translate user apps to the shell domain when using su
+  domain_auto_trans(untrusted_app, su_exec, suclient)
+
+  allow suclient sudaemon:unix_stream_socket { connectto read write setopt ioctl };
+
+  allow suclient superuser_device:dir { create rw_dir_perms setattr unlink };
+  allow suclient superuser_device:sock_file { create setattr unlink write };
+  allow suclient untrusted_app_devpts:chr_file { read write ioctl };
+  # For Settings control of access
+  allow system_app superuser_device:sock_file { read write create setattr unlink getattr };
+  allow system_app sudaemon:unix_stream_socket { connectto read write setopt ioctl };
+  allow system_app superuser_device:dir { create rw_dir_perms setattr unlink };
+')
-- 
2.17.1

