From 3e0b66abd8ac3fc471a9012e165cd572214eaca9 Mon Sep 17 00:00:00 2001
From: Rob Herring <robh@kernel.org>
Date: Thu, 15 Feb 2018 15:59:41 -0600
Subject: [PATCH 4/6] Switch to use gralloc handle defined in libdrm

Remove our custom handle definition and use the one defined in libdrm.

Signed-off-by: Rob Herring <robh@kernel.org>

Conflicts:
	gralloc_drm_handle.h
---
 Android.mk           |  1 +
 gralloc_drm_handle.h | 93 --------------------------------------------
 gralloc_gbm.cpp      | 57 +++++++++------------------
 gralloc_gbm_priv.h   |  3 --
 4 files changed, 19 insertions(+), 135 deletions(-)
 delete mode 100644 gralloc_drm_handle.h

diff --git a/Android.mk b/Android.mk
index 5fc8266..aa5348e 100644
--- a/Android.mk
+++ b/Android.mk
@@ -27,6 +27,7 @@ LOCAL_SRC_FILES := \
 	gralloc.cpp
 
 LOCAL_SHARED_LIBRARIES := \
+	libdrm \
 	libgbm \
 	liblog \
 	libcutils
diff --git a/gralloc_drm_handle.h b/gralloc_drm_handle.h
deleted file mode 100644
index d7dd73d..0000000
--- a/gralloc_drm_handle.h
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2010-2011 Chia-I Wu <olvaffe@gmail.com>
- * Copyright (C) 2010-2011 LunarG Inc.
- * Copyright (C) 2016 Linaro, Ltd., Rob Herring <robh@kernel.org>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included
- * in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
- * DEALINGS IN THE SOFTWARE.
- */
-
-#ifndef _GRALLOC_DRM_HANDLE_H_
-#define _GRALLOC_DRM_HANDLE_H_
-
-#include <cutils/log.h>
-#include <cutils/native_handle.h>
-#include <system/graphics.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-struct gralloc_drm_handle_t {
-	native_handle_t base;
-
-	/* file descriptors */
-	int prime_fd;
-
-	/* integers */
-	int magic;
-
-	int width;
-	int height;
-	int format;
-	int usage;
-
-	int name;   /* the name of the bo */
-	int stride; /* the stride in bytes */
-	int data_owner; /* owner of data (for validation) */
-
-	uint64_t modifier __attribute__((aligned(8))); /* buffer modifiers */
-	union {
-		void *data; /* pointer to struct gralloc_gbm_bo_t */
-		uint64_t reserved;
-	} __attribute__((aligned(8)));
-};
-#define GRALLOC_GBM_HANDLE_MAGIC 0x5f47424d
-#define GRALLOC_GBM_HANDLE_NUM_FDS 1
-#define GRALLOC_GBM_HANDLE_NUM_INTS (						\
-	((sizeof(struct gralloc_drm_handle_t) - sizeof(native_handle_t))/sizeof(int))	\
-	 - GRALLOC_GBM_HANDLE_NUM_FDS)
-
-static inline struct gralloc_drm_handle_t *gralloc_drm_handle(buffer_handle_t _handle)
-{
-	struct gralloc_drm_handle_t *handle =
-		(struct gralloc_drm_handle_t *) _handle;
-
-	if (handle && (handle->base.version != sizeof(handle->base) ||
-	               handle->base.numInts != GRALLOC_GBM_HANDLE_NUM_INTS ||
-	               handle->base.numFds != GRALLOC_GBM_HANDLE_NUM_FDS ||
-	               handle->magic != GRALLOC_GBM_HANDLE_MAGIC)) {
-		ALOGE("invalid handle: version=%d, numInts=%d, numFds=%d, magic=%x",
-			handle->base.version, handle->base.numInts,
-			handle->base.numFds, handle->magic);
-		handle = NULL;
-	}
-
-	return handle;
-}
-
-static inline int gralloc_drm_get_prime_fd(buffer_handle_t _handle)
-{
-	struct gralloc_drm_handle_t *handle = gralloc_drm_handle(_handle);
-	return (handle) ? handle->prime_fd : -1;
-}
-
-#ifdef __cplusplus
-}
-#endif
-#endif /* _GRALLOC_DRM_HANDLE_H_ */
diff --git a/gralloc_gbm.cpp b/gralloc_gbm.cpp
index af71b97..247fba7 100644
--- a/gralloc_gbm.cpp
+++ b/gralloc_gbm.cpp
@@ -41,7 +41,7 @@
 #include <gbm.h>
 
 #include "gralloc_gbm_priv.h"
-#include "gralloc_drm_handle.h"
+#include <android/gralloc_handle.h>
 
 #include <unordered_map>
 
@@ -152,9 +152,10 @@ static unsigned int get_pipe_bind(int usage)
 }
 
 static struct gbm_bo *gbm_import(struct gbm_device *gbm,
-		struct gralloc_gbm_handle_t *handle)
+		buffer_handle_t _handle)
 {
 	struct gbm_bo *bo;
+	struct gralloc_handle_t *handle = gralloc_handle(_handle);
 	#ifdef GBM_BO_IMPORT_FD_MODIFIER
 	struct gbm_import_fd_modifier_data data;
 	#else
@@ -191,9 +192,10 @@ static struct gbm_bo *gbm_import(struct gbm_device *gbm,
 }
 
 static struct gbm_bo *gbm_alloc(struct gbm_device *gbm,
-		struct gralloc_gbm_handle_t *handle)
+		buffer_handle_t _handle)
 {
 	struct gbm_bo *bo;
+	struct gralloc_handle_t *handle = gralloc_handle(_handle);
 	int format = get_gbm_format(handle->format);
 	int usage = get_pipe_bind(handle->usage);
 	int width, height;
@@ -241,6 +243,7 @@ void gbm_free(buffer_handle_t handle)
 	if (!bo)
 		return;
 
+	gbm_bo_handle_map.erase(handle);
 	gbm_bo_destroy(bo);
 }
 
@@ -257,7 +260,7 @@ static int gbm_map(buffer_handle_t handle, int x, int y, int w, int h,
 {
 	int err = 0;
 	int flags = GBM_BO_TRANSFER_READ;
-	struct gralloc_gbm_handle_t *gbm_handle = gralloc_gbm_handle(handle);
+	struct gralloc_gbm_handle_t *gbm_handle = gralloc_handle(handle);
 	struct gbm_bo *bo = gralloc_gbm_bo_from_handle(handle);
 	struct bo_data_t *bo_data = gbm_bo_data(bo);
 	uint32_t stride;
@@ -267,7 +270,7 @@ static int gbm_map(buffer_handle_t handle, int x, int y, int w, int h,
 
 	if (gbm_handle->format == HAL_PIXEL_FORMAT_YV12) {
 		if (x || y)
-			ALOGE("can't map with offset for planar %p - fmt %x", bo, gbm_handle->format);
+			ALOGE("can't map with offset for planar %p", bo);
 		w /= 2;
 		h += h / 2;
 	}
@@ -329,15 +332,14 @@ struct gbm_device *gbm_dev_create(void)
 int gralloc_gbm_handle_register(buffer_handle_t _handle, struct gbm_device *gbm)
 {
 	struct gbm_bo *bo;
-	struct gralloc_gbm_handle_t *handle = gralloc_gbm_handle(_handle);
 
-	if (!handle)
+	if (!_handle)
 		return -EINVAL;
 
 	if (gbm_bo_handle_map.count(_handle))
 		return -EINVAL;
 
-	bo = gbm_import(gbm, handle);
+	bo = gbm_import(gbm, _handle);
 	if (!bo)
 		return -EINVAL;
 
@@ -352,33 +354,10 @@ int gralloc_gbm_handle_register(buffer_handle_t _handle, struct gbm_device *gbm)
 int gralloc_gbm_handle_unregister(buffer_handle_t handle)
 {
 	gbm_free(handle);
-	gbm_bo_handle_map.erase(handle);
 
 	return 0;
 }
 
-/*
- * Create a buffer handle.
- */
-static struct gralloc_gbm_handle_t *create_bo_handle(int width,
-		int height, int format, int usage)
-{
-	struct gralloc_gbm_handle_t *handle;
-
-	handle = (gralloc_gbm_handle_t *)native_handle_create(GRALLOC_GBM_HANDLE_NUM_FDS, GRALLOC_GBM_HANDLE_NUM_INTS);
-	if (!handle)
-		return NULL;
-
-	handle->magic = GRALLOC_GBM_HANDLE_MAGIC;
-	handle->width = width;
-	handle->height = height;
-	handle->format = format;
-	handle->usage = usage;
-	handle->prime_fd = -1;
-
-	return handle;
-}
-
 /*
  * Create a bo.
  */
@@ -386,24 +365,24 @@ buffer_handle_t gralloc_gbm_bo_create(struct gbm_device *gbm,
 		int width, int height, int format, int usage, int *stride)
 {
 	struct gbm_bo *bo;
-	struct gralloc_gbm_handle_t *handle;
+	native_handle_t *handle;
 
-	handle = create_bo_handle(width, height, format, usage);
+	handle = gralloc_handle_create(width, height, format, usage);
 	if (!handle)
 		return NULL;
 
 	bo = gbm_alloc(gbm, handle);
 	if (!bo) {
-		native_handle_delete(&handle->base);
+		native_handle_delete(handle);
 		return NULL;
 	}
 
-	gbm_bo_handle_map.emplace(&handle->base, bo);
+	gbm_bo_handle_map.emplace(handle, bo);
 
 	/* in pixels */
-	*stride = handle->stride / gralloc_gbm_get_bpp(format);
+	*stride = gralloc_handle(handle)->stride / gralloc_gbm_get_bpp(format);
 
-	return &handle->base;
+	return handle;
 }
 
 /*
@@ -413,14 +392,14 @@ int gralloc_gbm_bo_lock(buffer_handle_t handle,
 		int usage, int x, int y, int w, int h,
 		void **addr)
 {
-	struct gralloc_gbm_handle_t *gbm_handle = gralloc_gbm_handle(handle);
+	struct gralloc_handle_t *gbm_handle = gralloc_handle(handle);
 	struct gbm_bo *bo = gralloc_gbm_bo_from_handle(handle);
 	struct bo_data_t *bo_data;
 
 	if (!bo)
 		return -EINVAL;
 
-	if ((gbm_handle->usage & usage) != usage) {
+	if ((gbm_handle->usage & usage) != (uint32_t)usage) {
 		/* make FB special for testing software renderer with */
 
 		if (!(gbm_handle->usage & GRALLOC_USAGE_SW_READ_OFTEN) &&
diff --git a/gralloc_gbm_priv.h b/gralloc_gbm_priv.h
index 5b17c08..7174fb8 100644
--- a/gralloc_gbm_priv.h
+++ b/gralloc_gbm_priv.h
@@ -32,9 +32,6 @@ extern "C" {
 struct gbm_device;
 struct gbm_bo;
 
-#define gralloc_gbm_handle_t gralloc_drm_handle_t
-#define gralloc_gbm_handle gralloc_drm_handle
-
 int gralloc_gbm_handle_register(buffer_handle_t handle, struct gbm_device *gbm);
 int gralloc_gbm_handle_unregister(buffer_handle_t handle);
 
-- 
2.17.1

